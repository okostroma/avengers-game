{"version":3,"sources":["thanos.jpg","zvuk.mp3","avengers-endgame.jpg","the_avengers_theme.mp3","Counter.js","Item.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Counter","className","this","props","state","counter","onClick","startAgain","React","Component","Item","shown","index","id","src","thanos","App","time","item","digit","setNewInterval","setInterval","getRandomImageIndex","onCounterClick","setState","Audio","mp3","play","finish","theme","Math","floor","random","items","map","i","key","avengers","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,8C,gBCA3CD,EAAOC,QAAU,IAA0B,gD,mKCe5BC,G,4KAVX,OACI,yBAAKC,UAAU,OAEmB,KAA7BC,KAAKC,MAAMC,MAAMC,QAAiB,yBAAKJ,UAAU,UAAf,cAAmC,4BAAQK,QAASJ,KAAKC,MAAMI,YAA5B,eAAnC,KAAyG,kCAAQL,KAAKC,MAAMC,MAAMC,c,GAL3JG,IAAMC,Y,gBCoBbC,E,uKAdP,IAAIC,EAAQT,KAAKC,MAAMS,QAAUV,KAAKC,MAAMU,GAAK,OAAS,GAI1D,OAEQ,yBAAKZ,UAAU,QAAO,yBAAKK,QAASJ,KAAKC,MAAMG,QAASQ,IAAKC,IAAQd,UAAS,kBAAaU,U,GAXxFH,IAAMC,W,kDC+EVO,E,4MAxEXZ,MAAQ,CACJC,QAAS,EACTO,MAAO,EACPK,KAAM,IACNC,KAAM,CAAC,GAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAG,GAAG,IACpCC,MAAO,G,EAIXC,eAAiB,SAACH,GACdI,aAAY,WACJ,EAAKC,wBAETL,I,EAGRM,eAAiB,WACb,EAAKC,SAAS,CACVnB,QAAS,EAAKD,MAAMC,QAAU,IAGtB,IAAIoB,MAAMC,KAChBC,OACN,IAAIC,EAAS,IAAIH,MAAMI,KACI,IAAvB,EAAKzB,MAAMC,SACXuB,EAAOD,Q,EAMfL,oBAAsB,WAClB,EAAKE,SAAS,CACVZ,MAAOkB,KAAKC,MAAsB,EAAhBD,KAAKE,a,EAO/BzB,WAAa,WACT,EAAKiB,SAAS,CACVnB,QAAS,K,kEAJbH,KAAKkB,eAAelB,KAAKE,MAAMa,Q,+BAUzB,IAAD,OAGDgB,EAAQ/B,KAAKE,MAAMc,KAAKgB,KAAI,SAAChB,EAAMiB,GAAP,OAAa,kBAAC,EAAD,CAAM7B,QAAS,EAAKiB,eACdX,MAAO,EAAKR,MAAMQ,MAAOwB,IAAKD,EAAGtB,GAAIsB,OAC5F,OAAQ,yBAAKlC,UAAU,cACf,yBAAKA,UAAU,OAAOa,IAAKuB,MAC/B,yBAAKpC,UAAU,WAIVgC,EAED,kBAAC,EAAD,CAAS1B,WAAYL,KAAKK,WAAYH,MAAOF,KAAKE,c,GA/D5CI,IAAMC,WCGJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.df59c31e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thanos.b0f4a42c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/zvuk.e3cc934d.mp3\";","module.exports = __webpack_public_path__ + \"static/media/avengers-endgame.f04f6770.jpg\";","module.exports = __webpack_public_path__ + \"static/media/the_avengers_theme.0fc52361.mp3\";","import React from 'react';\nimport './App.css';\n\nclass Counter extends React.Component {\n  render() {\n    return (\n        <div className=\"App\">\n\n            {this.props.state.counter === 10 ? <div className='finish'> CONGRATS! <button onClick={this.props.startAgain}>Start again</button> </div> : <span> {this.props.state.counter}</span>}\n\n        </div>\n    );\n  }\n}\n\nexport default Counter;\n","import React from 'react';\nimport './App.css';\nimport thanos from \"./thanos.jpg\"\n\nclass Item extends React.Component {\n\n\n    render() {\n\n        let shown = this.props.index === this.props.id ? 'show' : ''\n\n\n\n        return (\n\n                <div className='item'><img onClick={this.props.onClick} src={thanos} className={`photo + ${shown}`}/></div>\n\n\n\n        );\n    }\n}\n\nexport default Item;\n","import React from 'react';\nimport './App.css';\nimport Counter from \"./Counter\";\nimport Item from \"./Item\";\nimport mp3 from './zvuk.mp3'\nimport avengers from './avengers-endgame.jpg'\nimport theme from './the_avengers_theme.mp3'\n\n\nclass App extends React.Component {\n\n    state = {\n        counter: 0,\n        index: 1,\n        time: 700,\n        item: [{},{}, {}, {}, {}, {}, {},{},{}],\n        digit: 0\n\n    }\n\n    setNewInterval = (time) => {\n        setInterval(() => {\n                this.getRandomImageIndex()\n            },\n            time);\n    }\n\n    onCounterClick = () => {\n        this.setState({\n            counter: this.state.counter + 1\n        });\n\n        let audio = new Audio(mp3)\n        audio.play();\n        let finish = new Audio(theme);\n        if (this.state.counter === 9) {\n            finish.play();\n        }\n\n\n    }\n\n    getRandomImageIndex = () => {\n        this.setState({\n            index: Math.floor(Math.random() * 9)\n        })\n    }\n\n    componentDidMount() {\n        this.setNewInterval(this.state.time);\n    }\n    startAgain = () => {\n        this.setState({\n            counter: 0\n        })\n\n    }\n\n\n    render() {\n        // let finish = this.state.counter === 10 ? this.congrats() : ''\n\n        let items = this.state.item.map((item, i) => <Item onClick={this.onCounterClick}\n                                                           index={this.state.index} key={i} id={i}/>)\n    return (<div className='gameScreen'>\n            <img className='logo' src={avengers} />\n        <div className=\"wrapper\">\n            {/*{finish}*/}\n\n\n            {items}\n\n            <Counter startAgain={this.startAgain} state={this.state} />\n\n\n        </div>\n        </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}